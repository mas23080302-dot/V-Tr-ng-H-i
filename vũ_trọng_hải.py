# -*- coding: utf-8 -*-
"""Vũ Trọng Hải.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1oLrY48FrU-TS--sq313BGorBCvffOf-m
"""

#Part 1: Load Data

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

dataset_functions = sns.get_dataset_names()
print("Available datasets in Seaborn")
for name in dataset_functions:
    print("-", name)

from sklearn import datasets
import inspect
dataset_functions = [name for name, obj in inspect.getmembers(datasets)
if inspect.isfunction(obj) and (name.startswith('load_') or name.startswith('fetch_'))]
print("Available datasets in Scikit-Learn")
for name in dataset_functions:
    print("-", name)

from sklearn.datasets import load_iris
import pandas as pd

# Load the iris dataset
iris = load_iris()

df_iris = pd.DataFrame(data=iris.data, columns=iris.feature_names)
df_iris['target'] = iris.target
df_iris.head()

df_iris

#Part 2: 6 step

#Step 1: Business Understand
#Goal: Correctly classify the Iris flower based on its symbol (sepal length, sepal width, petal length, petal width).
#KPI: Prediction accuracy

import seaborn as sns
import pandas as pd
import matplotlib.pyplot as plt

# Display the first few rows of the df_iris DataFrame
display(df_iris.head())

#Step 2: Data Understanding

df = iris.copy()

#Check the column dataset
df.info()

# Define features (X) and target (y)
X = df.drop('target', axis=1)
y = df['target']

# Display the first few rows of X and y
print("Features (X):")
display(X.head())

print("\nTarget (y):")
display(y.head())

# Display the first few rows of the updated DataFrame
display(df)

#Check the dimension
df.shape

#Check the statistcs
df.describe()

#Check missing data
df.isna().sum()

#Get numerical columns
numerical_columns = df.select_dtypes(include=['number']).columns.tolist()
print(numerical_columns)

df[numerical_columns]

df[numerical_columns].isna().sum()

# Get non-numerical columns
non_numerical_columns = df.select_dtypes(exclude=['number']).columns.tolist()
print(non_numerical_columns)

df[non_numerical_columns]

import matplotlib.pyplot as plt
import seaborn as sns

correlation_matrix = df.corr(numeric_only=True)

plt.figure(figsize=(10, 8))
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt=".2f")
plt.title("Correlation Heatmap of Numerical Features")
plt.tight_layout()
plt.show()

#Step 3: Data Preparation
df

#Get numerical columns
numerical_columns = df.select_dtypes(include=['number']).columns.tolist()
print(numerical_columns)

df[numerical_columns]

# Get non-numerical columns
non_numerical_columns = df.select_dtypes(exclude=['number']).columns.tolist()
print(non_numerical_columns)

df[non_numerical_columns]

#Step 4: Modeling
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import classification_report

df_model = df[['sepal_length', 'sepal_width','petal_length','petal_width','target']]

df_model.info()

df_model.shape

#Split data
#Independent variables
x = df_model.drop(columns=['target'])
#Dependent variables
y = df_model['target']

x

y

x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=42)

#Train model
model = LogisticRegression(max_iter=200)
model.fit(x_train, y_train)

#Step 5 Ecaluation
from sklearn.metrics import confusion_matrix, classification_report

y_pred = model.predict(x_test)
print("confusion Matrix:")
print(confusion_matrix(y_test, y_pred))
print("\nClassification Report:")
print(classification_report(y_test, y_pred))

#Step 6: Deployment
import joblib
joblib.dump(model, 'iris_model.pkl')

import pandas as pd
test_set = pd.DataFrame([
    {'sepal_length': 7.8, 'sepal_width': 4.2, 'petal_length': 1, 'petal_width': 0.5},
    {'sepal_length': 5.1, 'sepal_width': 3.5, 'petal_length': 1.4, 'petal_width': 0.2},
    {'sepal_length': 6.0, 'sepal_width': 2.9, 'petal_length': 4.5, 'petal_width': 1.5}
])

test_set

model = joblib.load('iris_model.pkl')
predictions = model.predict(test_set)
test_set['target'] = predictions
print(test_set)